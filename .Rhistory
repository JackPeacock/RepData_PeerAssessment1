players <- c(players, "Wade")
averages <- c(averages, 93.01)
result <- c(result, "Win")
players <- c(players, "A. Smith")
averages <- c(averages, 89.67)
result <- c(result, "Loss")
players <- c(players, "van Gerwen")
averages <- c(averages, 98.85)
result <- c(result, "Win")
players <- c(players, "Beaton")
averages <- c(averages, 92.77)
result <- c(result, "Loss")
players <- c(players, "Whitlock")
averages <- c(averages, 93.88)
result <- c(result, "Win")
players <- c(players, "Painter")
averages <- c(averages, 90.86)
result <- c(result, "Loss")
players <- c(players, "White")
averages <- c(averages, 101.37)
result <- c(result, "Win")
players <- c(players, "Jenkins")
averages <- c(averages, 91.28)
result <- c(result, "Loss")
result <- factor(result)
df <- data.frame(players, averages, result)
df <- df[with(df, order(-averages)), ]
df$players <- reorder(df$players, -df$averages)
df$result <- reorder(df$result, -df$result)
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result color=(c("green", "red")), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result, color=(c("green", "red")), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), color=c("green", "red") stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", "red") stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill="green" stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill="green", stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", red), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", "red"), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", "red"), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(df, aes(x=players, y=averages, fill=result)) +geom_bar()
ggplot(df, aes(x=players, y=averages)) +geom_bar()
ggplot(data=df, aes(x=players, y=averages)) + geom_bar()
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(stat="identity")
ggplot(data=df, aes(x=players, y=averages, fill=result)) + geom_bar(stat="identity")
?ggplot
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
?aes
?geom_bar
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(factor=result, fill=c("green", "red")), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank()
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank()))
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank()))
?scale_fill_manual
plot <- ggplot(data=df, aes(x=players, y=averages))
plot + scale_colour_manual(values = c("green", "red"))
plot + scale_colour_manual(values = c("green", "red")) + geom_bar(aes(fill=result))
plot + scale_colour_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
plot + scale_fill_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
levels(df$result)
df$result <- factor(df$result, levels(df$result)[2,1])
df$result <- factor(df$result, levels(df$result)[c(2,1)])
levels(df$result)
plot + scale_fill_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
levels(df$result)
plot + scale_fill_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("qunatmod")
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign=FALSE)
sampleTimes = index(amzn)
length(sameplTimes)
length(sampleTimes)
head(sampleTimes)
class(sampleTime)
class(sampleTimes)
grep("2012-", sampleTimes)
length(grep("2012-", sampleTimes))
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
unzip("activity.zip")
data <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
```{r}
date <- vector()
total <- vector()
for (i in levels(data$date)) {
date <- c(date, i)
total <- c(total, sum(data[data$date==i,]$steps, na.rm=TRUE))
}
hist(total, xlab="Total Steps", main="Histogram of Total Daily Steps")
mean(total)
median(total)
```
## What is the average daily activity pattern?
```{r}
interval <- vector()
averageSteps <- vector()
for (i in as.numeric(levels(as.factor(data$interval)))) {
interval <- c(interval, i)
averageSteps <- c(averageSteps, mean(data[data$interval==i,]$steps, na.rm=TRUE))
}
plot(interval, averageSteps, type="l", xlab="Interval", ylab="Average Steps")
df <- data.frame(interval, averageSteps)
df[df$averageSteps==max(df$averageSteps),]
```
## Imputing missing values
```{r}
## 1. Calculating the total number of missing values in the data set.
nrow(data[data$steps=="NA",])
## 2.
```
## Are there differences in activity patterns between weekdays and weekends?
echo
echo = TRUE
echo = FALSE
data <- read.csv("activity.csv")
getwd()
setwd("./datasciencecoursera/reproducible_research/RepData_PeerAssessment1/")
getwd()
list.files()
data <- read.csv("activity.csv")
head(data)
levels(data$date)
head(as.numeric(levels(as.factor(data$interval))))
tail(as.numeric(levels(as.factor(data$interval))))
?head
head(as.numeric(levels(as.factor(data$interval))), n=30)
head(data)
data$interval <- as.factor(data$interval)
head(data)
levels(data$interval) <- 1:288
head(data)
View(data)
View(data)
data <- read.csv("activity.csv")
head(data)
class(data$interval)
data$interval <- as.factor(data$interval)
class(data$interval)
head(data)
length(levels(data$interval))
levels(data$interval) <- 1:288
head(data$interval)
which.max(averageSteps)
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 1:288
head(data)
data <- read.csv("activity.csv")
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 1:288
head(data)
intervalVector <- as.numeric(levels(as.factor(data$interval)))
intervalVector
intervalVector <- as.factor(data$interval)
intervalVector
class(levels(intervalVector))
?as.PosixCT
?as.POSIXct
data <- read.csv("activity.csv")
class(data$interval)
head(data)
axis(side=1, at=c(1,144,288))
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps")
averageSteps <- vector()
for (i in levels(data$intervalNumbs)) {
averageSteps <- c(averageSteps, mean(data[data$interval==i,]$steps, na.rm=TRUE))
}
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps")
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 1:288
averageSteps <- vector()
for (i in levels(data$intervalNumbs)) {
averageSteps <- c(averageSteps, mean(data[data$interval==i,]$steps, na.rm=TRUE))
}
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps")
axis(side=1, at=c(1,144,288))
?plot
axis(side=1, at=c(1,144,288))
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps")
head(averageStep)
head(averageSteps)
averageSteps <- vector()
for (i in levels(data$intervalNumbs)) {
averageSteps <- c(averageSteps, mean(data[data$intervalNumbs==i,]$steps, na.rm=TRUE))
}
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps")
axis(side=1, at=c(1,144,288))
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps", xaxt="n")
axis(side=1, at=c(1,144,288))
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps", xaxt="n")
axis(side=1, at=seq(1,288,12))
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps", xaxt="n")
axis(side=1, at=seq(0,288,12))
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Interval", ylab="Average Steps", xaxt="n")
axis(side=1, at=seq(0,288,12), labels=1:24)
axis(side=1, at=seq(0,288,12), labels=0:24)
?mean
testData <- c(NA, NA, 2)
testData
mean(testData)
head(data)
data[data$steps==0,]
length(data[data$steps==0,])
nrow(data[data$steps==0,])
nrow(data)
nrow(data[data$steps==NA,])
nrow(data[is.na(data$steps),])
unique(data$interval)
0:length(unique(data$interval))
data$intervalNumbs <- as.factor(data$interval)
data$intervalNumbs
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval)-1)
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval))
levels(data$intervalNumbs)
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval))
data <- read.csv("activity.csv")
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval))
data$intervalNumbs
table(data$intervalNumbs)
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval)-1)
table(data$intervalNumbs)
data <- read.csv("activity.csv")
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval)-1)
table(data$intervalNumbs)
data <- read.csv("activity.csv")
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval)-1)
table(data$intervalNumbs)
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:length(unique(data$interval))-1
table(data$intervalNumbs)
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 0:(length(unique(data$interval))-1)
table(data$intervalNumbs)
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Hour of Day", ylab="Average Steps", xaxt="n", main="Month Averaged Steps for Each 5 Minute Interval in the Day")
length(levels(data$intervalNumbs))
averageSteps <- vector()
for (i in levels(data$intervalNumbs)) {
averageSteps <- c(averageSteps, mean(data[data$intervalNumbs==i,]$steps, na.rm=TRUE))
}
(which.max(averageSteps)-1)/12
(which.max(averageSteps)-1)
(which.max(averageSteps)-1)%12
(which.max(averageSteps)-1) mod 12
(which.max(averageSteps)-1) %% 12
(which.max(averageSteps)-1) - (which.max(averageSteps)-1) %% 12
"Hour"
((which.max(averageSteps)-1) - (which.max(averageSteps)-1) %% 12) /12
?cat
head(data)
data[1]
data[,1]
data[1,]
tail(data)
nrow(data)
data[17568,]
is.na(data[17568,])
is.na(data[17568,]$steps)
head(data)
data <- read.csv("activity.csv")
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 1:(length(unique(data$interval)))
tail(data)
?for
nrow(data)
head(1"nrow(data")
head(1:nrow(data)
head(1:nrow(data))
head(1:nrow(data))
tail(1:nrow(data))
for (i in 1:nrow(data)) {
if (is.na(data[i,]$steps) {
head(averageSteps)
date <- vector()
total <- vector()
for (i in levels(data$date)) {
date <- c(date, i)
total <- c(total, sum(data[data$date==i,]$steps))
}
hist(total, xlab="Total Steps", main="Histogram of Total Daily Steps")
mean(total)
median(total)
total
length(total)
levels(data$date)
data <- read.csv("activity.csv")
```
# Reproducible Research: Peer Assessment 1
### Loading and preprocessing the data
1. Load the data (i.e. read.csv())
```{r}
data <- read.csv("activity.csv")
```
2. Process/transform the data (if necessary) into a format suitable for your analysis.
```{r}
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 1:(length(unique(data$interval)))
```
### What is mean total number of steps taken per day?
1. Make a histogram of the total number of steps taken each day
```{r}
date <- vector()
total <- vector()
for (i in levels(data$date)) {
date <- c(date, i)
total <- c(total, sum(data[data$date==i,]$steps, na.rm=TRUE))
}
hist(total, xlab="Total Steps", main="Histogram of Total Daily Steps")
```
2. Calculate and report the mean and median total number of steps taken per day
```{r}
mean(total)
median(total)
```
### What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
averageSteps <- vector()
for (i in levels(data$intervalNumbs)) {
averageSteps <- c(averageSteps, mean(data[data$intervalNumbs==i,]$steps, na.rm=TRUE))
}
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Hour of Day", ylab="Average Steps", xaxt="n", main="Month Averaged Steps for Each 5 Minute Interval in the Day")
axis(side=1, at=seq(1,length(levels(data$intervalNumbs)),12), labels=0:23)
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
cat("Hour ", (which.max(averageSteps) - which.max(averageSteps) %% 12) /12)
cat("Minute ", (which.max(averageSteps) %% 12)*5)
```
### Imputing missing values
1. Calculating the total number of missing values in the data set.
```{r}
nrow(data[data$steps=="NA",])
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
*Going to use the mean for that 5-minute interval*
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
# Save copy of old data before imputing NA values.
oldData <- data
for (i in 1:nrow(data)) {
if (is.na(data[i,]$steps)) {
data[i,]$steps <- averageSteps[data[i,]$intervalNumbs]
}
}
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}}
date <- vector()
total <- vector()
for (i in levels(data$date)) {
date <- c(date, i)
total <- c(total, sum(data[data$date==i,]$steps))
}
hist(total, xlab="Total Steps", main="Histogram of Total Daily Steps")
mean(total)
median(total)
```
## Are there differences in activity patterns between weekdays and weekends?
total
data <- read.csv("activity.csv")
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 1:(length(unique(data$interval)))
date <- vector()
total <- vector()
for (i in levels(data$date)) {
date <- c(date, i)
total <- c(total, sum(data[data$date==i,]$steps, na.rm=TRUE))
}
mean(total)
median(total)
total
intervalNumbs
# Reproducible Research: Peer Assessment 1
### Loading and preprocessing the data
1. Load the data (i.e. read.csv())
```{r}
data <- read.csv("activity.csv")
```
2. Process/transform the data (if necessary) into a format suitable for your analysis.
```{r}
data$intervalNumbs <- as.factor(data$interval)
levels(data$intervalNumbs) <- 1:(length(unique(data$interval)))
```
### What is mean total number of steps taken per day?
1. Make a histogram of the total number of steps taken each day
```{r}
date <- vector()
total <- vector()
for (i in levels(data$date)) {
date <- c(date, i)
total <- c(total, sum(data[data$date==i,]$steps, na.rm=TRUE))
}
hist(total, xlab="Total Steps", main="Histogram of Total Daily Steps")
```
2. Calculate and report the mean and median total number of steps taken per day
```{r}
mean(total)
median(total)
```
### What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
averageSteps <- vector()
for (i in levels(data$intervalNumbs)) {
averageSteps <- c(averageSteps, mean(data[data$intervalNumbs==i,]$steps, na.rm=TRUE))
}
plot(levels(data$intervalNumbs), averageSteps, type="l", xlab="Hour of Day", ylab="Average Steps", xaxt="n", main="Month Averaged Steps for Each 5 Minute Interval in the Day")
axis(side=1, at=seq(1,length(levels(data$intervalNumbs)),12), labels=0:23)
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
cat("Hour ", (which.max(averageSteps) - which.max(averageSteps) %% 12) /12)
cat("Minute ", (which.max(averageSteps) %% 12)*5)
```
### Imputing missing values
1. Calculating the total number of missing values in the data set.
```{r}
nrow(data[data$steps=="NA",])
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
*Going to use the mean for that 5-minute interval*
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
# Save copy of old data before imputing NA values.
oldData <- data
for (i in 1:nrow(data)) {
if (is.na(data[i,]$steps)) {
data[i,]$steps <- averageSteps[data[i,]$intervalNumbs]
}
}
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
newDate <- vector()
newTotal <- vector()
for (i in levels(data$date)) {
newDate <- c(newDate, i)
newTotal <- c(newTotal, sum(data[data$date==i,]$steps))
}
hist(newTotal, xlab="Total Steps", main="Histogram of Total Daily Steps")
mean(newTotal)
median(newTotal)
```
### Are there differences in activity patterns between weekdays and weekends?
head(oldData)
head(data)
sum(data[data$date="2012-10-01",]$steps)
sum(data[data$date=="2012-10-01",]$steps)
is.na(oldData[oldData$date=="2012-10-01",]$steps)
newTotal
mean(newTotal)
weekdays(levels(data$date))
weekdays(levels(as.factor(data$date))
weekdays(levels(as.factor(data$date)))
as.factor(data$date)
levels(as.factor(data$date))
weekday(levels(as.factor(data$date)))
weekdays(levels(as.factor(data$date)))
weekdays(as.date(levels(as.factor(data$date))))
?as.date
?weekdays
?as.Date
weekdays(as.Date(levels(as.factor(data$date))))
head(weekdays(data$date))
head(weekdays(as.date(data$date)))
head(weekdays(as.Date(data$date)))
head(data[data$weekday == "Sunday" || data$weekday == "Saturday",])
head(data[data$weekday == "Sunday" | data$weekday == "Saturday",])
data$weekday <- weekdays(as.Date(data$date))
data$weekday <- weekdays(as.Date(data$date))
head(data[data$weekday == "Sunday" | data$weekday == "Saturday",])
head(data[data$weekday == "Sunday" || data$weekday == "Saturday",])
length(data[data$weekday == "Sunday" | data$weekday == "Saturday",])
nrow(data[data$weekday == "Sunday" | data$weekday == "Saturday",])
4608*7/2
61/7
8.7*2*288
5011-288
4723-288
data$weekday[data$weekday == "Sunday" | data$weekday == "Saturday"]
data$weekday == "Saturday" | data$weekday == "Sunday"
?replace
data$weekday <- weekdays(as.Date(data$date))
data$weekend <- data$weekday == "Saturday" | data$weekday == "Sunday"
class(data$weekend)
data$weekend <- as.factor(data$weekend)
class(data$weekend)
levels(data$weekend)
levels(data$weekend) <- c("weekday", "weekend")
head(data)
data <- c(1,2)
data
data <- vector()
data
averageSteps <- vector()
